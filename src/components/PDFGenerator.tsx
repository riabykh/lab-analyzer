'use client';

import { useCallback } from 'react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface LabResult {
  marker: string;
  value: string;
  unit: string;
  referenceRange: string;
  status: 'normal' | 'high' | 'low' | 'critical';
  explanation: string;
  recommendation?: string;
}

interface PDFGeneratorProps {
  results: LabResult[];
  patientInfo?: {
    name?: string;
    dateOfBirth?: string;
    testDate?: string;
    reportId?: string;
  };
  onGenerated?: (pdfBlob: Blob) => void;
}

export default function PDFGenerator({ results, patientInfo, onGenerated }: PDFGeneratorProps) {
  
  const generatePDF = useCallback(() => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    
    // Header
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('LabWise Analysis Report', 20, 25);
    
    // Logo/Branding area (optional)
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('Generated by LabWise - https://labwise.rialys.eu', pageWidth - 20, 15, { align: 'right' });
    
    // Report metadata
    let yPosition = 40;
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    
    const reportDate = new Date().toLocaleDateString();
    const reportTime = new Date().toLocaleTimeString();
    
    doc.text(`Report Generated: ${reportDate} at ${reportTime}`, 20, yPosition);
    yPosition += 7;
    
    if (patientInfo?.reportId) {
      doc.text(`Report ID: ${patientInfo.reportId}`, 20, yPosition);
      yPosition += 7;
    }
    
    if (patientInfo?.testDate) {
      doc.text(`Test Date: ${patientInfo.testDate}`, 20, yPosition);
      yPosition += 7;
    }
    
    // Important disclaimer
    yPosition += 5;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(220, 38, 38); // Red color
    doc.text('IMPORTANT MEDICAL DISCLAIMER', 20, yPosition);
    yPosition += 5;
    
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(0, 0, 0); // Black color
    const disclaimerText = 'This report provides educational information only and is not intended to replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical decisions.';
    const disclaimerLines = doc.splitTextToSize(disclaimerText, pageWidth - 40);
    doc.text(disclaimerLines, 20, yPosition);
    yPosition += disclaimerLines.length * 4 + 10;
    
    // Results summary
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Lab Results Summary', 20, yPosition);
    yPosition += 10;
    
    // Summary statistics
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    const totalResults = results.length;
    const normalResults = results.filter(r => r.status === 'normal').length;
    const abnormalResults = totalResults - normalResults;
    const criticalResults = results.filter(r => r.status === 'critical').length;
    
    doc.text(`Total Markers Analyzed: ${totalResults}`, 20, yPosition);
    doc.text(`Normal Results: ${normalResults}`, 120, yPosition);
    yPosition += 5;
    doc.text(`Abnormal Results: ${abnormalResults}`, 20, yPosition);
    doc.text(`Critical Results: ${criticalResults}`, 120, yPosition);
    yPosition += 15;
    
    // Results table
    const tableData = results.map(result => [
      result.marker,
      result.value,
      result.unit,
      result.referenceRange,
      result.status.toUpperCase(),
      result.explanation.substring(0, 100) + (result.explanation.length > 100 ? '...' : '')
    ]);
    
    doc.autoTable({
      head: [['Marker', 'Value', 'Unit', 'Reference Range', 'Status', 'Explanation']],
      body: tableData,
      startY: yPosition,
      theme: 'grid',
      headStyles: { 
        fillColor: [41, 128, 185],
        textColor: 255,
        fontSize: 9,
        fontStyle: 'bold'
      },
      bodyStyles: { 
        fontSize: 8,
        cellPadding: 3
      },
      columnStyles: {
        0: { cellWidth: 25 }, // Marker
        1: { cellWidth: 20 }, // Value
        2: { cellWidth: 15 }, // Unit
        3: { cellWidth: 25 }, // Reference Range
        4: { cellWidth: 20 }, // Status
        5: { cellWidth: 35 }  // Explanation
      },
      didParseCell: function(data) {
        if (data.section === 'body' && data.column.index === 4) {
          const status = data.cell.text[0]?.toLowerCase();
          if (status === 'critical') {
            data.cell.styles.fillColor = [239, 68, 68]; // Red
            data.cell.styles.textColor = 255;
          } else if (status === 'high' || status === 'low') {
            data.cell.styles.fillColor = [251, 191, 36]; // Yellow
            data.cell.styles.textColor = 0;
          } else if (status === 'normal') {
            data.cell.styles.fillColor = [34, 197, 94]; // Green
            data.cell.styles.textColor = 255;
          }
        }
      },
      margin: { top: 10, left: 20, right: 20 }
    });
    
    // Detailed explanations on new page
    doc.addPage();
    yPosition = 25;
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Detailed Analysis', 20, yPosition);
    yPosition += 15;
    
    results.forEach((result, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight - 50) {
        doc.addPage();
        yPosition = 25;
      }
      
      // Marker name
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(`${index + 1}. ${result.marker}`, 20, yPosition);
      yPosition += 7;
      
      // Value and status
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(`Value: ${result.value} ${result.unit}`, 25, yPosition);
      doc.text(`Status: ${result.status.toUpperCase()}`, 100, yPosition);
      yPosition += 5;
      
      doc.text(`Reference Range: ${result.referenceRange}`, 25, yPosition);
      yPosition += 7;
      
      // Explanation
      doc.setFont('helvetica', 'normal');
      const explanationLines = doc.splitTextToSize(result.explanation, pageWidth - 50);
      doc.text(explanationLines, 25, yPosition);
      yPosition += explanationLines.length * 4;
      
      // Recommendation if available
      if (result.recommendation) {
        yPosition += 3;
        doc.setFont('helvetica', 'bold');
        doc.text('Recommendation:', 25, yPosition);
        yPosition += 5;
        
        doc.setFont('helvetica', 'normal');
        const recommendationLines = doc.splitTextToSize(result.recommendation, pageWidth - 50);
        doc.text(recommendationLines, 25, yPosition);
        yPosition += recommendationLines.length * 4;
      }
      
      yPosition += 10; // Space between results
    });
    
    // Footer on last page
    const totalPages = doc.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(128, 128, 128);
      
      // Page number
      doc.text(`Page ${i} of ${totalPages}`, pageWidth - 20, pageHeight - 10, { align: 'right' });
      
      // Footer text
      doc.text('This report is for educational purposes only - Not medical advice', 20, pageHeight - 10);
      doc.text('Generated by LabWise - https://labwise.rialys.eu', 20, pageHeight - 5);
    }
    
    // Generate blob and callback
    const pdfBlob = doc.output('blob');
    onGenerated?.(pdfBlob);
    
    return doc;
  }, [results, patientInfo, onGenerated]);
  
  const downloadPDF = useCallback(() => {
    const doc = generatePDF();
    const fileName = `labwise-report-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  }, [generatePDF]);
  
  const previewPDF = useCallback(() => {
    const doc = generatePDF();
    const pdfUrl = doc.output('bloburl');
    window.open(pdfUrl, '_blank');
  }, [generatePDF]);
  
  return {
    generatePDF,
    downloadPDF,
    previewPDF
  };
}

// Export hook for use in other components
export function usePDFGenerator(results: LabResult[], patientInfo?: any) {
  return PDFGenerator({ results, patientInfo });
}
